{"version":3,"sources":["components/markdown/code-block.jsx","components/markdown/component.js","components/markdown/heading-block.jsx","components/markdown/link-block.jsx","components/markdown/index.jsx"],"names":["CodeBlock","props","ref","useRef","useEffect","current","window","hljs","highlightBlock","useCodeBlockState","className","language","value","HeadingBlock","anchor","useState","setAnchor","slugify","children","toLowerCase","useHeadingBlockState","content","Fragment","id","level","LinkBlock","href","substr","length","src","frameBorder","allow","allowFullScreen","style","width","display","height","maxWidth","margin","title","Markdown","markdown","setMarkdown","fetch","path","then","response","text","useMarkdownState","source","renderers","code","heading","link","escapeHtml"],"mappings":"iKAeeA,EAZG,SAACC,GAAW,IAEtBC,ECYyB,WAC7B,IAAMA,EAAMC,mBAQZ,OANAC,qBAAU,WACFF,EAAIG,SAAWC,OAAOC,MACtBD,OAAOC,KAAKC,eAAeN,EAAIG,WAEpC,IAEI,CACHH,ODrBAO,GADAP,IAGJ,OACI,6BACI,0BAAMA,IAAKA,EAAKQ,UAAS,mBAAcT,EAAMU,WAAaV,EAAMW,SEuB7DC,EA9BM,SAACZ,GAAW,IAEzBa,ED0B4B,SAACb,GAAW,IAAD,EACfc,mBAAS,IADM,mBACpCD,EADoC,KAC5BE,EAD4B,KAS3C,OANAZ,qBAAU,WAAO,IAAD,IACRQ,EAAQK,MAAS,UAAAhB,EAAMiB,SAAS,UAAf,mBAAmBjB,aAAnB,eAA0BW,QAAS,IAAIO,eAC5DP,EAAK,iBAAaA,GAClBI,EAAUJ,KACX,CAACX,EAAMiB,WAEH,CAACJ,UClCJM,CAAqBnB,GADrBa,OAGEO,EACF,kBAAC,IAAMC,SAAP,OAEOR,GAAW,uBAAGS,GAAE,UAAKT,KACvBb,EAAMiB,UAKf,OAAQjB,EAAMuB,OACV,KAAK,EACD,OAAO,4BAAKH,GACZ,KAAK,EACD,OAAO,4BAAKA,GAChB,KAAK,EACD,OAAO,4BAAKA,GAChB,KAAK,EACD,OAAO,4BAAKA,GAChB,KAAK,EACD,OAAO,4BAAKA,GAChB,QACI,OAAO,4BAAKA,KCEbI,EA7BG,SAACxB,GAAW,IACnByB,EAAQzB,EAARyB,KAIP,MAFmB,4BAEfA,EAAKC,OAAO,EAFG,0BAEWC,QAEtB,4BACIC,IAAKH,EACLI,YAAY,IACZC,MAAM,0EACNC,iBAAiB,EACjBC,MAAO,CACHC,MAAO,OACPC,QAAS,QACTC,OAAQ,QACRC,SAAU,QACVC,OAAQ,aAEZC,MAAOtC,EAAMiB,WAMrB,uBAAGQ,KAAMA,GAAOzB,EAAMiB,WCHfsB,UAjBE,SAACvC,GAAW,IAGrBwC,EHPwB,SAACxC,GAAW,IAAD,EACPc,qBADO,mBAChC0B,EADgC,KACtBC,EADsB,KASvC,OANAtC,qBAAU,WACNuC,MAAM1C,EAAM2C,MAAMC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAAQF,MAAK,SAACC,GACxDJ,EAAYI,QAEjB,CAAC7C,EAAM2C,OAEH,CACHH,YGFAO,CAAiB/C,GADjBwC,SAGJ,OACI,yBAAK/B,UAAS,iBACV,kBAAC,IAAD,CACIuC,OAAQR,EACRS,UAAW,CAACC,KAAMnD,EAAWoD,QAASvC,EAAcwC,KAAM5B,GAC1D6B,YAAY","file":"static/js/4.e9551c40.chunk.js","sourcesContent":["import React from 'react';\nimport { useCodeBlockState } from './component';\n\nconst CodeBlock = (props) => {\n    const {\n        ref\n    } = useCodeBlockState();\n\n    return (\n        <pre>\n            <code ref={ref} className={`language-${props.language}`}>{props.value}</code>\n        </pre>\n    );\n};\n\nexport default CodeBlock;","import { useEffect, useState, useRef } from \"react\";\nimport slugify from 'slugify';\n\nexport const useMarkdownState = (props) => {\n    const [markdown, setMarkdown] = useState();\n\n    useEffect(() => {\n        fetch(props.path).then((response) => response.text()).then((response) => {\n            setMarkdown(response);\n        });\n    }, [props.path]);\n\n    return {\n        markdown\n    }\n}\n\nexport const useCodeBlockState = () => {\n    const ref = useRef();\n\n    useEffect(() => {\n        if (ref.current && window.hljs) {\n            window.hljs.highlightBlock(ref.current);\n        }\n    }, []);\n\n    return {\n        ref\n    }\n}\n\nexport const useHeadingBlockState = (props) => {\n    const [anchor, setAnchor] = useState('');\n\n    useEffect(() => {\n        let value = slugify((props.children[0]?.props?.value || '').toLowerCase());\n        value = `/pages/${value}`;\n        setAnchor(value);\n    }, [props.children]);\n\n    return {anchor}\n}","import React from 'react';\nimport { useHeadingBlockState } from './component';\n\nconst HeadingBlock = (props) => {\n    const {\n        anchor\n    } = useHeadingBlockState(props);\n    \n    const content = (\n        <React.Fragment>\n            {/* eslint-disable-next-line */}\n            {!!anchor && (<a id={`${anchor}`} />)}\n            {props.children}\n        </React.Fragment>\n    );\n\n\n    switch (props.level) {\n        case 1:\n            return <h1>{content}</h1>\n            case 2:\n                return <h2>{content}</h2>\n            case 3:\n                return <h3>{content}</h3>\n            case 4:\n                return <h4>{content}</h4>\n            case 5:\n                return <h5>{content}</h5>\n            default:\n                return <h6>{content}</h6>\n    }\n};\n\nexport default HeadingBlock;","import React from 'react';\n\nconst LinkBlock = (props) => {\n    const {href} = props;\n\n    const youtubestr = 'https://www.youtube.com';\n\n    if (href.substr(0, youtubestr.length) === youtubestr) {\n        return (\n            <iframe \n                src={href}\n                frameBorder=\"0\" \n                allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" \n                allowFullScreen={true}\n                style={{\n                    width: '100%',\n                    display: 'block',\n                    height: '315px',\n                    maxWidth: '560px',\n                    margin: '10px auto',\n                }}\n                title={props.children}\n           />\n        )\n    }\n\n    return (\n        <a href={href}>{props.children}</a>\n    );\n};\n\nexport default LinkBlock;","import React from 'react';\nimport { useMarkdownState } from './component';\nimport ReactMarkdown from 'react-markdown';\nimport CodeBlock from './code-block';\nimport HeadingBlock from './heading-block';\nimport LinkBlock from './link-block';\n\nconst Markdown = (props) => {\n    \n    const {\n        markdown\n    } = useMarkdownState(props);\n\n    return (\n        <div className={`markdown-body`}>\n            <ReactMarkdown \n                source={markdown} \n                renderers={{code: CodeBlock, heading: HeadingBlock, link: LinkBlock}}\n                escapeHtml={false}\n            />\n        </div>\n    );\n};\n\nexport default Markdown;"],"sourceRoot":""}