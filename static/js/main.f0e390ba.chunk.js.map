{"version":3,"sources":["components/normalize-css/index.js","components/views/profile/style.js","components/date-diff/component.js","components/date-diff/index.jsx","components/views/profile/index.jsx","components/router/index.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["NormilizeCSS","createGlobalStyle","ProfileContainer","styled","div","useDateDiffState","props","useState","diff","setDiff","useEffect","dt","Date","date","_d","differenceInMilliseconds","milliseconds","years","Math","floor","months","days","hours","minutes","seconds","getDiff","DateDiff","Profile","src","alt","className","href","Pages","React","lazy","Router","fallback","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2ZAEO,IAAMA,EAAeC,YAAH,K,OCAZC,EAAmBC,IAAOC,IAAV,8EAAGD,CAAH,yS,gBCiChBE,EAAmB,SAACC,GAAW,IAAD,EACfC,qBADe,mBAChCC,EADgC,KAC1BC,EAD0B,KAUvC,OAPAC,qBAAU,WACN,IAAMC,EAAK,IAAIC,KAAKN,EAAMO,MACpBC,EAAKC,YAAyB,IAAIH,KAAQD,GAEhDF,EAtCQ,SAACO,GACTA,EAAe,IAAGA,IAAiB,GAEvC,IACIC,EAAQC,KAAKC,MAAMH,EADP,SAEhBA,GAFgB,QAEAC,EAEhB,IACIG,EAASF,KAAKC,MAAMH,EADP,YAEjBA,GAFiB,WAEDI,EAEhB,IACIC,EAAOH,KAAKC,MAAMH,EADN,OAEhBA,GAFgB,MAEAK,EAEhB,IACIC,EAAQJ,KAAKC,MAAMH,EADN,MAEjBA,GAFiB,KAEDM,EAEhB,IACIC,EAAUL,KAAKC,MAAMH,EADN,KAEnBA,GAFmB,IAEHO,EAEhB,IACIC,EAAUN,KAAKC,MAAMH,EADN,KAKnB,OAHAA,GAFmB,IAEHQ,EAGT,CAACP,QAAOG,SAAQC,OAAMC,QAAOC,UAASC,WAUjCC,CAAQX,MACjB,CAACR,EAAMO,OAEH,CACHL,SClCOkB,EAVE,SAACpB,GAAW,IAErBE,EACAH,EAAiBC,GADjBE,KAGJ,OAAKA,EAEC,GAAN,OAAUA,EAAKS,MAAf,iBAA+BT,EAAKY,OAAP,eAAwBZ,EAAKY,OAA7B,iBAA4CZ,EAAKY,OAAS,EAAd,QAA5C,IAFX,MCuBPO,EA1BC,WACZ,OACI,kBAACzB,EAAD,KACI,6BACI,yBAAK0B,IAAI,wBAAwBC,IAAI,qBAAqBC,UAAU,gBACpE,kDACA,mJACyH,gCAAQ,kBAAC,EAAD,CAAUjB,KAAI,gBAD/I,iCACwM,gCAAQ,kBAAC,EAAD,CAAUA,KAAI,gBAD9N,8BAE+B,uBAAGkB,KAAK,oBAAR,SAF/B,kEAIA,yBAAKD,UAAU,SACX,uBAAGC,KAAK,kCAAkCF,IAAI,8BAC1C,uBAAGC,UAAU,oBAEjB,uBAAGC,KAAK,8BAA8BF,IAAI,6BACtC,uBAAGC,UAAU,mBAEjB,uBAAGC,KAAK,wCAAwCF,IAAI,+BAChD,uBAAGC,UAAU,yBCjB/BE,EAAQC,IAAMC,MAAK,kBAAM,iCAahBC,EAXA,WACX,OACI,kBAAC,WAAD,CAAUC,SAAU,4CAChB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,SAASC,UAAWN,IAChC,kBAAC,IAAD,CAAOK,KAAK,IAAIC,UAAWX,OCE5BY,MATf,WACI,OACI,kBAAC,IAAD,KACI,kBAACvC,EAAD,MACA,kBAAC,EAAD,QCGQwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAENC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f0e390ba.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const NormilizeCSS = createGlobalStyle`\n    html, body, #root {\n        font-family: 'Montserrat', sans-serif;\n        height: 100vh;\n        padding: 0;\n        margin: 0;\n    }\n`;","import styled from \"styled-components/macro\";\n\nexport const ProfileContainer = styled.div`\n    width: 100%;\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    > div {\n        text-align: center;\n        width: 90%;\n        max-width: 700px;\n        line-height: 30px;\n\n        .img-profile {\n            width: 186px;\n            height: 186px;\n            border-radius: 50%;\n            background-size: cover;\n            margin: 0 auto;\n        }\n\n        .links {\n            a {\n                color: #CCC;\n                font-size: 31px;\n                margin: 0 10px;\n            }\n        }\n    }\n\n\n    \n`;","import {useState, useEffect} from 'react';\nimport { differenceInMilliseconds } from 'date-fns';\n\n\nconst getDiff = (milliseconds) => {\n    if (milliseconds < 0) milliseconds *= -1;\n\n    let calcYear = (1000 * 60 * 60 * 24 * 365);\n    let years = Math.floor(milliseconds / calcYear);\n    milliseconds -= years * calcYear;\n\n    let calcMonth = (1000 * 60 * 60 * 24 * 30.417);\n    let months = Math.floor(milliseconds / calcMonth);\n    milliseconds -= months * calcMonth;\n\n    let calcDays = (1000 * 60 * 60 * 24);\n    let days = Math.floor(milliseconds / calcDays);\n    milliseconds -= days * calcDays;\n\n    let calcHours = (1000 * 60 * 60);\n    let hours = Math.floor(milliseconds / calcHours);\n    milliseconds -= hours * calcHours;\n\n    let calcMinutes = (1000 * 60);\n    let minutes = Math.floor(milliseconds / calcMinutes);\n    milliseconds -= minutes * calcMinutes;\n\n    let calcSeconds = (1000);\n    let seconds = Math.floor(milliseconds / calcSeconds);\n    milliseconds -= seconds * calcSeconds;\n\n\n    return {years, months, days, hours, minutes, seconds};\n}\n\nexport const useDateDiffState = (props) => {\n    const [diff, setDiff] = useState();\n\n    useEffect(() => {\n        const dt = new Date(props.date);\n        const _d = differenceInMilliseconds(new Date(), dt);\n\n        setDiff(getDiff(_d));\n    }, [props.date]);\n\n    return {\n        diff\n    }\n}","import { useDateDiffState } from './component';\n\nconst DateDiff = (props) => {\n    const {\n        diff\n    } = useDateDiffState(props);\n\n    if (!diff) return null;\n\n    return `${diff.years} years${!!diff.months ? ` and ${diff.months} month${diff.months > 1 ? `s` : ``}` : ``}`;\n};\n\nexport default DateDiff;","import React from 'react';\nimport { ProfileContainer } from './style';\nimport DateDiff from 'components/date-diff';\n\nconst Profile = () => {\n    return (\n        <ProfileContainer>\n            <div>\n                <img src=\"/assets/images/me.jpg\" alt=\"Wellington Viveiro\" className=\"img-profile\" />\n                <h1>Wellington Viveiro</h1>\n                <p>\n                    Wellington Viveiro is an Analyst Programmer living in Sydney, NSW, Australia. He has worked with web development for <strong><DateDiff date={`2008-08-19`} /></strong> and with system analysis for <strong><DateDiff date={`2011-03-21`} /></strong>.\n                    &nbsp;Currently working at <a href=\"https://asmex.io\">Asmex</a> and developing some useful components with Node js and React.\n                </p>\n                <div className=\"links\">\n                    <a href=\"https://twitter.com/wellviveiro\" alt=\"Twitter Wellington Viveiro\">\n                        <i className=\"fab fa-twitter\" />\n                    </a>\n                    <a href=\"https://github.com/wviveiro\" alt=\"Github Wellington Viveiro\">\n                        <i className=\"fab fa-github\" />\n                    </a>\n                    <a href=\"https://www.linkedin.com/in/wviveiro/\" alt=\"Linkedin Wellington Viveiro\">\n                        <i className=\"fab fa-linkedin\" />\n                    </a>\n                </div>\n            </div>\n        </ProfileContainer>\n    );\n};\n\nexport default Profile;","import React, { Suspense } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Profile from 'components/views/profile';\n// import Pages from 'components/views/pages';\n\nconst Pages = React.lazy(() => import('components/views/pages'));\n\nconst Router = () => {\n    return (\n        <Suspense fallback={<div>Loading...</div>}>\n            <Switch>\n                <Route path=\"/pages\" component={Pages} />\n                <Route path=\"/\" component={Profile} />\n            </Switch>\n        </Suspense>\n    );\n};\n\nexport default Router;","import React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport { NormilizeCSS } from './components/normalize-css';\nimport Router from 'components/router';\n\nfunction App() {\n    return (\n        <HashRouter>\n            <NormilizeCSS />\n            <Router />\n        </HashRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}