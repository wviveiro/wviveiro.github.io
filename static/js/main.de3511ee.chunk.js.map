{"version":3,"sources":["components/profile/index.jsx","App.jsx","serviceWorker.js","index.jsx","components/date/index.jsx"],"names":["getDiff","dteDiff","date","diff","DateShow","React","forwardRef","props","ref","react_default","a","createElement","className","years","months","FullDate","days","hours","minutes","seconds","Profile","_createState","createState","_createState2","Object","slicedToArray","webDiff","setWebDiff","_createState3","_createState4","analystDiff","setAnalystDate","wb","useRef","ab","wf","af","loader","useCallback","setTimeout","useEffect","_hover","type","current","classList","add","_unhover","remove","removeEventListener","addEventListener","href","alt","App","components_profile","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","strdate","f","num","concat","substr","length","currdt","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","hourSplit","split","hrs","aux","dtObj","getDateObj","getFullDate","modify","setDate","setMonth","isValid","isNaN","date_compare","dt","milliseconds","Math","floor","format","strformat","auxformat","replace","week","getDay"],"mappings":"wMAMMA,EAAU,SAACC,GAEb,OADWC,MACDC,KAAKF,IAMbG,EAAWC,IAAMC,WAAW,SAACC,EAAOC,GAAQ,IACvCL,EAAQI,EAARJ,KAEP,OACIM,EAAAC,EAAAC,cAAA,QAAMH,IAAKA,EAAKI,UAAU,aAA1B,OACWT,EAAKU,MADhB,kBAEmBV,EAAKW,OAFxB,aAOFC,EAAWV,IAAMC,WAAW,SAACC,EAAOC,GAAQ,IACvCL,EAAQI,EAARJ,KAEP,OACIM,EAAAC,EAAAC,cAAA,OAAKH,IAAKA,EAAKI,UAAU,aACpBT,EAAKU,MADV,WACyBV,EAAKW,OAD9B,YAC+CX,EAAKa,KADpD,UACiEb,EAAKc,MADtE,WACqFd,EAAKe,QAD1F,aAC6Gf,EAAKgB,QADlH,cAsFOC,EA9EC,SAACb,GAAU,IAAAc,EACOC,IAAYtB,EA3BhC,eA0BauB,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAChBK,EADgBH,EAAA,GACPI,EADOJ,EAAA,GAAAK,EAEeN,IAAYtB,EA3BpC,eAyBS6B,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEhBE,EAFgBD,EAAA,GAEHE,EAFGF,EAAA,GAGjBG,EAAKC,mBACLC,EAAKD,mBACLE,EAAKF,mBACLG,EAAKH,mBAELI,EAASC,sBAAY,WACvBC,WAAW,WACPZ,EAAW3B,EApCT,eAqCF+B,EAAe/B,EApCT,eAqCNqC,KACD,MACJ,CAACV,EAAYI,IAmChB,OAhCAS,oBAAU,WACNH,IAEA,IAAMI,EAAS,SAACC,GACZ,OAAO,WACU,QAATA,GAAgBP,EAAGQ,QAAQC,UAAUC,IAAI,UAChC,aAATH,GAAqBN,EAAGO,QAAQC,UAAUC,IAAI,YAIpDC,EAAW,SAACJ,GACd,OAAO,WACU,QAATA,GAAgBP,EAAGQ,QAAQC,UAAUG,OAAO,UACnC,aAATL,GAAqBN,EAAGO,QAAQC,UAAUG,OAAO,YAI7Df,EAAGW,QAAQK,oBAAoB,YAAaP,EAAO,QACnDT,EAAGW,QAAQM,iBAAiB,YAAaR,EAAO,QAChDP,EAAGS,QAAQK,oBAAoB,YAAaP,EAAO,aACnDP,EAAGS,QAAQM,iBAAiB,YAAaR,EAAO,aAEhDT,EAAGW,QAAQK,oBAAoB,aAAcF,EAAS,QACtDd,EAAGW,QAAQM,iBAAiB,aAAcH,EAAS,QACnDZ,EAAGS,QAAQK,oBAAoB,aAAcF,EAAS,aACtDZ,EAAGS,QAAQM,iBAAiB,aAAcH,EAAS,cAGpD,CAACT,IAKA5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,iIACyHF,EAAAC,EAAAC,cAACP,EAAD,CAAUI,IAAKwB,EAAI7B,KAAMuB,IADlJ,iCAC2LjB,EAAAC,EAAAC,cAACP,EAAD,CAAUI,IAAK0B,EAAI/B,KAAM2B,IADpN,8BAE+BrB,EAAAC,EAAAC,cAAA,KAAGuC,KAAK,oBAAR,SAF/B,kEAIAzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACfH,EAAAC,EAAAC,cAAA,KAAGuC,KAAK,kCAAkCC,IAAI,8BACtC1C,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAEjBH,EAAAC,EAAAC,cAAA,KAAGuC,KAAK,8BAA8BC,IAAI,6BACtC1C,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAEjBH,EAAAC,EAAAC,cAAA,KAAGuC,KAAK,wCAAwCC,IAAI,+BAChD1C,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sBAGrBH,EAAAC,EAAAC,cAACI,EAAD,CAAUP,IAAK2B,EAAIhC,KAAMuB,IACzBjB,EAAAC,EAAAC,cAACI,EAAD,CAAUP,IAAK4B,EAAIjC,KAAM2B,QCnG9BsB,MANf,WACE,OACE3C,EAAAC,EAAAC,cAAC0C,EAAD,OCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gCEZnBC,EAAOC,QAjHM,SAAPrE,EAAQsE,GAEV,IAAMC,EAAI,SAACC,GAAD,MAAS,IAAAC,OAAID,GAAME,OAAO,IAAAD,OAAID,GAAMG,OAAS,IAGvD,IAAKL,EAAS,CACV,IAAMM,EAAS,IAAIC,KACnBP,EAAO,GAAAG,OAAMG,EAAOE,cAAb,KAAAL,OAA8BF,EAAEK,EAAOG,WAAa,GAApD,KAAAN,OAA0DF,EAAEK,EAAOI,WAAnE,KAAAP,OAAiFF,EAAEK,EAAOK,YAA1F,KAAAR,OAAyGF,EAAEK,EAAOM,cAAlH,KAAAT,OAAmIF,EAAEK,EAAOO,eAGvJ,IAAIC,EAAYd,EAAQe,MAAM,KAC1BtE,EAAQ,EACRC,EAAU,EACVC,EAAU,EACd,GAAImE,EAAUT,OAAS,EAAG,CACtB,IAAIW,EAAMF,EAAU,GAAGC,MAAM,KACV,IAAfC,EAAIX,SACJ5D,EAAQuE,EAAI,GACZtE,EAAUsE,EAAI,GACdrE,EAAUqE,EAAI,IAElBhB,EAAUc,EAAU,GAGxB,IAAMG,EAAMjB,EAAQe,MAAM,KACpBG,EAAQ,IAAIX,KAAKU,EAAI,IAAKA,EAAI,GAAK,EAAGA,EAAI,GAAIxE,EAAOC,EAASC,GA8EpE,MAAO,CACHwE,WAzEe,WACf,OAAOD,GAyEPE,YArEgB,WAEhB,MADgB,GAAAjB,OAAMe,EAAMV,cAAZ,KAAAL,OAA6BF,EAAEiB,EAAMT,WAAa,GAAlD,KAAAN,OAAwDF,EAAEiB,EAAMR,aAqEhFW,OAjEW,SAACnB,EAAKhC,GACS,QAAtBA,EAAKkC,OAAO,EAAG,GACfc,EAAMI,QAAQJ,EAAMR,UAAYR,GACJ,UAAtBhC,EAAKkC,OAAO,EAAG,IACrBc,EAAMK,SAASL,EAAMT,WAAaP,IA8DtCsB,QAhFY,WACZ,OAAON,aAAiBX,OAASkB,MAAMP,IAgFvCvF,KAzCS,SAAC+F,GACV,IAAMC,EAAKjG,EAAKgG,GAChB,IAAKC,EAAGH,UAAW,OAAO,EAE1B,IAAII,EAAeD,EAAGR,aAAeD,EACjCU,EAAe,IAAGA,IAAiB,GAEvC,IACIvF,EAAQwF,KAAKC,MAAMF,EADP,SAEhBA,GAFgB,QAEAvF,EAEhB,IACIC,EAASuF,KAAKC,MAAMF,EADP,YAEjBA,GAFiB,WAEDtF,EAEhB,IACIE,EAAOqF,KAAKC,MAAMF,EADN,OAEhBA,GAFgB,MAEApF,EAEhB,IACIC,EAAQoF,KAAKC,MAAMF,EADN,MAEjBA,GAFiB,KAEDnF,EAEhB,IACIC,EAAUmF,KAAKC,MAAMF,EADN,KAEnBA,GAFmB,IAEHlF,EAEhB,IACIC,EAAUkF,KAAKC,MAAMF,EADN,KAKnB,OAHAA,GAFmB,IAEHjF,EAGT,CAACN,QAAOC,SAAQE,OAAMC,QAAOC,UAASC,YAU7CoF,OA5DW,SAACC,GACZ,IAAIC,EAAYD,EAKhBC,GADAA,GADAA,GADAA,GADAA,EAAYA,EAAUC,QAAQ,SAAUhB,EAAMV,gBACxB0B,QAAQ,OAAQjC,EAAEiB,EAAMT,WAAa,KACrCyB,QAAQ,MAAOhB,EAAMT,WAAa,IAClCyB,QAAQ,OAAQjC,EAAEiB,EAAMR,aACxBwB,QAAQ,MAAOhB,EAAMR,WAE3C,IAAIyB,EAAOjB,EAAMkB,SAOjB,OALc,KAATD,IAAYA,EAAO,GAGxBF,EAAYA,EAAUC,QAAQ,MAAOC","file":"static/js/main.de3511ee.chunk.js","sourcesContent":["import React, {useEffect, useCallback, useRef} from 'react';\nimport './profile.scss';\nimport date from '../date';\nimport createState from 'react-hook-setstate';\n\n\nconst getDiff = (dteDiff) => {\n    const dt = date();\n    return dt.diff(dteDiff);  \n}\n\nconst dtWeb = '2008-08-19';\nconst dtAnalyst = '2011-03-21';\n\nconst DateShow = React.forwardRef((props, ref) => {\n    const {diff} = props;\n\n    return (\n        <span ref={ref} className=\"date-show\">\n            &nbsp;{diff.years} years and \n                    &nbsp;{diff.months} months\n        </span>\n    );\n});\n\nconst FullDate = React.forwardRef((props, ref) => {\n    const {diff} = props;\n\n    return (\n        <div ref={ref} className=\"full-date\">\n            {diff.years} years, {diff.months} months, {diff.days} days, {diff.hours} hours, {diff.minutes} minutes, {diff.seconds} seconds\n        </div>\n    );\n});\n\n\n\nconst Profile = (props) => {\n    const [webDiff, setWebDiff] = createState(getDiff(dtWeb));\n    const [analystDiff, setAnalystDate] = createState(getDiff(dtAnalyst));\n    const wb = useRef();\n    const ab = useRef();\n    const wf = useRef();\n    const af = useRef();\n\n    const loader = useCallback(() => {\n        setTimeout(() => {\n            setWebDiff(getDiff(dtWeb));\n            setAnalystDate(getDiff(dtAnalyst));\n            loader();\n        }, 1000);\n    }, [setWebDiff, setAnalystDate]);\n\n    \n    useEffect(() => {\n        loader();\n        \n        const _hover = (type) => {\n            return () => {\n                if (type === 'web') wf.current.classList.add('active');\n                if (type === 'analysis') af.current.classList.add('active');\n            }\n        }\n\n        const _unhover = (type) => {\n            return () => {\n                if (type === 'web') wf.current.classList.remove('active');\n                if (type === 'analysis') af.current.classList.remove('active');\n            }\n        }\n\n        wb.current.removeEventListener('mouseover', _hover('web'));\n        wb.current.addEventListener('mouseover', _hover('web'));\n        ab.current.removeEventListener('mouseover', _hover('analysis'));\n        ab.current.addEventListener('mouseover', _hover('analysis'));\n\n        wb.current.removeEventListener('mouseleave', _unhover('web'));\n        wb.current.addEventListener('mouseleave', _unhover('web'));\n        ab.current.removeEventListener('mouseleave', _unhover('analysis'));\n        ab.current.addEventListener('mouseleave', _unhover('analysis'));\n        \n\n    }, [loader]);\n    \n    \n\n    return (\n        <div className=\"my-profile\">\n            <div className=\"inner-content\">\n                <div className=\"my-picture\" />\n                <div className=\"content\">\n                    <h1>Wellington Viveiro</h1>\n                    <p>\n                        Wellington Viveiro is an Analyst Programmer living in Sydney, NSW, Australia. He has worked with web development for <DateShow ref={wb} diff={webDiff} /> and with system analysis for <DateShow ref={ab} diff={analystDiff} />.\n                        &nbsp;Currently working at <a href=\"https://asmex.io\">Asmex</a> and developing some useful components with Node js and React.\n                    </p>\n                    <div className=\"links\">\n                    <a href=\"https://twitter.com/wellviveiro\" alt=\"Twitter Wellington Viveiro\">\n                            <i className=\"fab fa-twitter\" />\n                        </a>\n                        <a href=\"https://github.com/wviveiro\" alt=\"Github Wellington Viveiro\">\n                            <i className=\"fab fa-github\" />\n                        </a>\n                        <a href=\"https://www.linkedin.com/in/wviveiro/\" alt=\"Linkedin Wellington Viveiro\">\n                            <i className=\"fab fa-linkedin\" />\n                        </a>\n                    </div>\n                    <FullDate ref={wf} diff={webDiff} />\n                    <FullDate ref={af} diff={analystDiff} />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Profile;","import React from 'react';\nimport Profile from './components/profile';\n\nfunction App() {\n  return (\n    <Profile />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/**\n * strdate format 'YYYY-MM-DD HH:mm:ss'\n * If empty strdate, get current date\n *\n * @author Wellington Viveiro <wviveiro@gmail.com>\n **/\nconst date = (strdate) => {\n    // Format number function to add lead 0\n    const f = (num) => `0${num}`.substr(`0${num}`.length - 2);\n    \n\n    if (!strdate) {\n        const currdt = new Date();\n        strdate = `${currdt.getFullYear()}-${f(currdt.getMonth() + 1)}-${f(currdt.getDate())} ${f(currdt.getHours())}:${f(currdt.getMinutes())}:${f(currdt.getSeconds())}`;\n    }\n\n    let hourSplit = strdate.split(' ');\n    let hours = 0;\n    let minutes = 0;\n    let seconds = 0;\n    if (hourSplit.length > 1) {\n        let hrs = hourSplit[1].split(':');\n        if (hrs.length === 3) {\n            hours = hrs[0];\n            minutes = hrs[1];\n            seconds = hrs[2];\n        }\n        strdate = hourSplit[0];\n    }\n    \n    const aux = strdate.split('-');\n    const dtObj = new Date(aux[0], +aux[1] - 1, aux[2], hours, minutes, seconds);\n\n    const isValid = () => {\n        return dtObj instanceof Date && !isNaN(dtObj);\n    }\n\n    const getDateObj = () => {\n        return dtObj;\n    }\n    \n\n    const getFullDate = () => {\n        const newStrDate = `${dtObj.getFullYear()}-${f(dtObj.getMonth() + 1)}-${f(dtObj.getDate())}`;\n        return newStrDate;\n    }\n\n    const modify = (num, type) => {\n        if (type.substr(0, 3) === 'day') {\n            dtObj.setDate(dtObj.getDate() + num);\n        }else if (type.substr(0, 5) === 'month') {\n            dtObj.setMonth(dtObj.getMonth() + num);\n        }\n    }\n\n    const format = (strformat) => {\n        let auxformat = strformat;\n        auxformat = auxformat.replace(/YYYY/gi, dtObj.getFullYear());\n        auxformat = auxformat.replace(/MM/gi, f(dtObj.getMonth() + 1));\n        auxformat = auxformat.replace(/M/gi, dtObj.getMonth() + 1);\n        auxformat = auxformat.replace(/DD/gi, f(dtObj.getDate()));\n        auxformat = auxformat.replace(/D/gi, dtObj.getDate());\n\n        let week = dtObj.getDay();\n        \n        if (+week === 0) week = 7;\n\n\n        auxformat = auxformat.replace(/N/gi, week);\n\n        return auxformat;\n    }\n\n    const diff = (date_compare) => {\n        const dt = date(date_compare);\n        if (!dt.isValid()) return false;\n\n        let milliseconds = dt.getDateObj() - dtObj;\n        if (milliseconds < 0) milliseconds *= -1;\n\n        let calcYear = (1000 * 60 * 60 * 24 * 365);\n        let years = Math.floor(milliseconds / calcYear);\n        milliseconds -= years * calcYear;\n\n        let calcMonth = (1000 * 60 * 60 * 24 * 30.417);\n        let months = Math.floor(milliseconds / calcMonth);\n        milliseconds -= months * calcMonth;\n\n        let calcDays = (1000 * 60 * 60 * 24);\n        let days = Math.floor(milliseconds / calcDays);\n        milliseconds -= days * calcDays;\n\n        let calcHours = (1000 * 60 * 60);\n        let hours = Math.floor(milliseconds / calcHours);\n        milliseconds -= hours * calcHours;\n\n        let calcMinutes = (1000 * 60);\n        let minutes = Math.floor(milliseconds / calcMinutes);\n        milliseconds -= minutes * calcMinutes;\n\n        let calcSeconds = (1000);\n        let seconds = Math.floor(milliseconds / calcSeconds);\n        milliseconds -= seconds * calcSeconds;\n\n        \n        return {years, months, days, hours, minutes, seconds};\n\n    }\n\n    return {\n        getDateObj,\n        getFullDate,\n        modify,\n        isValid,\n        diff,\n        format\n    }\n}\n\nmodule.exports = date;"],"sourceRoot":""}